[gd_resource type="Shader" format=3 uid="uid://dt01obwqhcpb"]

[resource]
code = "shader_type spatial;
render_mode blend_add,cull_back,diffuse_burley,specular_schlick_ggx,unshaded,depth_test_disabled,shadows_disabled;
uniform vec4 albedo : source_color;
uniform sampler2D depth_texture: source_color, hint_depth_texture;

varying flat float projected_z;
varying flat vec2 projected_uv;

void vertex() {
	// find node origin on-screen (in UV coordinates) and depth (in clip space)
	vec4 clip_position = (PROJECTION_MATRIX * vec4(NODE_POSITION_VIEW, 1.0));
	vec3 projected_position = clip_position.xyz / clip_position.w;
	projected_uv = vec2(projected_position.x * 0.5 + 0.5, projected_position.y * 0.5 + 0.5);
	projected_z = projected_position.z;

	// billboard shader from StandardMaterial3D
	MODELVIEW_MATRIX = VIEW_MATRIX * mat4(INV_VIEW_MATRIX[0], INV_VIEW_MATRIX[1], INV_VIEW_MATRIX[2], MODEL_MATRIX[3]);
	MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0), vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0), vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0), vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);
	if (PROJECTION_MATRIX[3][3] != 0.0) {
		float h = abs(1.0 / (2.0 * PROJECTION_MATRIX[1][1]));
		float sc = (h * 2.0); //consistent with Y-fov
		MODELVIEW_MATRIX[0]*=sc;
		MODELVIEW_MATRIX[1]*=sc;
		MODELVIEW_MATRIX[2]*=sc;
	} else {
		float sc = -(MODELVIEW_MATRIX)[3].z;
		MODELVIEW_MATRIX[0]*=sc;
		MODELVIEW_MATRIX[1]*=sc;
		MODELVIEW_MATRIX[2]*=sc;
	}
}

void fragment() {
	float depth = texture(depth_texture, projected_uv).r;

	if (depth > projected_z) {
		ALBEDO = max(0.0, 1.0 - length(UV - vec2(0.5)) * 2.0) * albedo.rgb;
	} else {
		ALBEDO = vec3(0.0);
	}
}
"
